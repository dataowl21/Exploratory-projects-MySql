SELECT * 
FROM motor_vehicles_theft.stolen_vehicles;

SELECT * 
FROM motor_vehicles_theft.make_details;

-- Changed the wrong column names to the right ones

ALTER TABLE motor_vehicles_theft.stolen_vehicles
CHANGE ï»¿vehicle_id vehicle_id int;

ALTER TABLE motor_vehicles_theft.make_details
CHANGE ï»¿make_id make_id int;

-- Checking if there are any duplicates in table make_details (make_name, make_id)

SELECT make_name, COUNT(*)
FROM motor_vehicles_theft.make_details
GROUP BY make_name
HAVING COUNT(*) > 1;

SELECT make_id, COUNT(*)
FROM motor_vehicles_theft.make_details
GROUP BY make_id
HAVING COUNT(*) > 1;

-- Top 5 most stoled vehicles by color

SELECT color, COUNT(vehicle_id)
FROM motor_vehicles_theft.stolen_vehicles
GROUP BY color
ORDER BY COUNT(vehicle_id) desc
LIMIT 5;

-- Top 5 most popular locations where vehicles are stolen

SELECT location_id, COUNT(vehicle_id)
FROM motor_vehicles_theft.stolen_vehicles
GROUP BY location_id
ORDER BY COUNT(vehicle_id) desc
LIMIT 5;

-- Top 5 vehicle descriptions of stolen vehicles 

SELECT vehicle_desc, COUNT(vehicle_id)
FROM motor_vehicles_theft.stolen_vehicles
GROUP BY vehicle_desc
ORDER BY COUNT(vehicle_id) desc
LIMIT 5;


-- Percentege by make_type of stolen vehicles

SELECT 
    make_type,
    COUNT(make_id) AS total_count,
   ROUND((COUNT(make_id) * 100.0 / (SELECT COUNT(make_id) FROM motor_vehicles_theft.make_details)) ,2) AS percentage
FROM 
    motor_vehicles_theft.make_details
GROUP BY 
    make_type;

-- Joined two tables on make_id

SELECT a.make_id,vehicle_type, model_year, color, date_stolen,make_name, make_type
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
    ORDER BY a.make_id asc;
    
-- Total vehicles stolen by make_name and make_type

    SELECT  make_name, make_type, COUNT(a.make_id) as total_vehicles_stolen
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
    GROUP BY make_name, make_type
    ORDER BY COUNT(a.make_id) desc;
    
-- Added theft_category for each make_name by using CASE statement 

    SELECT  make_name, make_type, COUNT(a.make_id) as total_vehicles_stolen,
CASE 
		WHEN COUNT(a.make_id)>= 50 THEN 'High'
        WHEN COUNT(a.make_id) BETWEEN 10 and 49 THEN 'Medium'
        WHEN COUNT(a.make_id)<= 9 THEN 'Low'
END AS theft_category
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
    GROUP BY make_name, make_type
    ORDER BY COUNT(a.make_id) desc;
    
-- What model_years attracts thefts the most  
    
SELECT model_year, COUNT(a.make_id)
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
GROUP BY model_year
ORDER BY COUNT(a.make_id) desc;

-- Max and Min vehicles stolen using CTE

WITH CTE_count AS
(
    SELECT make_name, COUNT(a.make_id) as total_vehicles_stolen
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
    GROUP BY make_name
    )
    SELECT MAX(total_vehicles_stolen) as max_stolen, MIN(total_vehicles_stolen) as min_stolen
    FROM CTE_count;

    
-- Number of stolen vehicles per year

SELECT YEAR(date_stolen) as year_stolen,  COUNT(a.make_id) as number_of_stolen_vehicles
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
GROUP BY  YEAR(date_stolen)
ORDER BY COUNT(a.make_id) desc;

-- Number of stolen vehicles by year and month

SELECT YEAR(date_stolen) as year_stolen, MONTH(date_stolen) as month_stolen, COUNT(a.make_id) as number_of_stolen_vehicles
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
GROUP BY  YEAR(date_stolen), MONTH(date_stolen)
ORDER BY  YEAR(date_stolen), MONTH(date_stolen);

-- Number of stolen vehicles by actual date

SELECT (date_stolen), COUNT(a.make_id) as number_of_stolen_vehicles
FROM motor_vehicles_theft.make_details a
JOIN motor_vehicles_theft.stolen_vehicles b
	ON a.make_id = b.make_id
GROUP BY (date_stolen)
ORDER BY  (date_stolen);
